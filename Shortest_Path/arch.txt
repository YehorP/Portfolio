
//    public void find(){
//        Node tmp;
//        visited = new boolean[map.size()];
//        visited[start.row * rows + start.col] = true;
//        prev = new int[map.size()];
//        LinkedList<Node> queue = new LinkedList<Node>();
//        queue.add(start);
//        while (queue.size() != 0) {
//            if (flag) {
//                break;
//            }
//            tmp = queue.poll();
//            Iterator<Node> i = tmp.connections.listIterator();
//            while (i.hasNext()) {
//                Node n = i.next();
//                if (!visited[n.row * rows + n.col]) {
//                    prev[n.row * rows + n.col] = tmp.row * rows + tmp.col;
//                    visited[n.row * rows + n.col] = true;
//                    queue.add(n);
//                }
//                if (n.row == end.row && n.col == end.col) {
//                    flag = true;
//                    break;
//                }
//            }
//        }
//        if (flag) {
//            int index = end.row * rows + end.col;
//            while (index != (start.row * rows + start.col)) {
//                res.add(0, map.get(index));
//                index = prev[index];
//            }
//            res.add(0, map.get(index));
//            System.out.println(res);
//        }else {
//            System.out.println("no way");
//        }
//    }
 private  void createMap(){
        int col=0,row=0;
        for (int i=0;i<cols*rows;i++){
            if (col-cols==0){
                col=0;
                row++;
            }
            map.add(new Node(col,row));
            col++;
        }
        start=map.get((int)(Math.random()*map.size()));
        end=map.get((int)(Math.random()*map.size()));
        System.out.println("start:"+start);
        System.out.println("end:"+end);
        start.makeStart();
        end.makeEnd();

        int values[]={1,-1,cols,-cols,cols-1,-cols-1,cols+1,-cols+1};
        int leftBorderValues[]={1,cols,-cols,-cols+1,cols+1};
        int rightBorderValues[]={-1,cols,-cols,-cols-1,cols-1};
        for (int i=0;i<map.size();i++){
            if (i%rows==0){
                for (int a:leftBorderValues){
                    if (a>0?i+a<map.size():i+a>=0){
                        map.get(i).connect(map.get(i+a));
                    }
                }
            }else if((i+1)%rows==0){
                for (int a:rightBorderValues){
                    if (a>0?i+a<map.size():i+a>=0){
                        map.get(i).connect(map.get(i+a));
                    }
                }
            }else {
                for (int a:values){
                    if (a>0?i+a<map.size():i+a>=0){
                        map.get(i).connect(map.get(i+a));
                    }
                }
            }
        }

    }
//        if (i % cols == 0 && values[a] == -1) {
//        } else if ((i + 1) % cols == 0 && values[a] == 1) {
//        }
//         else if(values[a]>0?i + values[a] < map.size():i + values[a] >= 0){
//            map.get(i).connect(map.get(i + values[a]));
//        }